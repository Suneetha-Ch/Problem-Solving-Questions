/*It is New Year's Day and people are in line for the Wonderland rollercoaster ride. 
Each person wears a sticker indicating their initial position in the queue from  to .
Any person can bribe the person directly in front of them to swap positions, but they still wear their original sticker.
One person can bribe at most two others.
Example
eg: Q: [1,2,3,5,4,6,7,8]
If person 5 bribes person 4 , the queue will look like this: . Only  bribe is required. Print 1.
eg2: Q : [4,1,2,3]
Person 4 had to bribe  3 people to get to the current position. Print Too chaotic.
reference: https://www.hackerrank.com/challenges/new-year-chaos/problem?isFullScreen=true&h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=arrays&h_r=next-challenge&h_v=zen
*/

using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Result
{

    /*
     * Complete the 'minimumBribes' function below.
     *
     * The function accepts INTEGER_ARRAY q as parameter.
     */

    public static void minimumBribes(int[] q)
    { 
        var positions = new Dictionary<int, int>();
        var originalList = new int[q.Length];
        int x  = 0;
        for(int i =0; i< q.Length; ++i){
            originalList[i] = i+1;
            positions[i+1] = i;
        }
        int totalSwaps =0;
        int index = 0;
        int temp;
        var swapCount = new int[q.Length];
        for(int i = 0 ; i< q.Length; ++i)
        {
            positions.TryGetValue(q[i], out index);
            while(q[i] != originalList[i] && swapCount[index] <=2)
            {
                if(index > i)
                {
                    positions[originalList[index]] = index-1;
                    positions[originalList[index-1]] = index;
                    temp = originalList[index];
                    originalList[index] =  originalList[index-1];
                    originalList[index-1] = temp;
                    index--;
                   
                } 
                else{
                    positions[originalList[index]] = index+1;
                    positions[originalList[index+1]] = index;
                    temp = originalList[index];
                    originalList[index] =  originalList[index+1];
                    originalList[index+1] = temp;
                    index++;
                }
                swapCount[originalList[index]-1] ++;
                totalSwaps++;
            }  
            if(swapCount[index] > 2){
                Console.WriteLine("Too chaotic");
                return;
            } 
        }
          Console.WriteLine(totalSwaps);
    }

}

class Solution
{
    public static void Main(string[] args)
    {
        int t = Convert.ToInt32(Console.ReadLine().Trim());

        for (int tItr = 0; tItr < t; tItr++)
        {
            int n = Convert.ToInt32(Console.ReadLine().Trim());

            List<int> q = Console.ReadLine().TrimEnd().Split(' ').ToList().Select(qTemp =>            Convert.ToInt32(qTemp)).ToList();

            Result.minimumBribes(q.ToArray());
        }
    }
}
